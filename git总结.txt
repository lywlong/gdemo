创建版本库:
$ mkdir learngit
$ cd learngit
$ pwd

$ls -ah

$ git add git总结.txt

$ git config --global user.name invictus
$ git config --global user.email 694569409@qq.com

$ git remote add origin git@github.com:lywlong/localRepository.git 连接github系统
$ git pull --rebase origin master 合并
$ git push -u origin master 更新

$ ssh-keygen -t rsa -C "xxxxx@xx.com" 填写email地址，然后一直“回车”，获取key

$ git status
$ git diff git总结.txt
"-"表示变动前的文件,"+++"表示变动后的文件.

@@ -1,7 +1,7 @@
前面的"-1,7″分成三个部分:减号表示第一个文件(即f1),"1″表示第1行,"7″表示连续7行.合在一起,就表示下面是第一个文件从第1行开始的连续7行.同样的,"+1,7″表示变动后,成为第二个文件从第1行开始的连续7行.

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

历史记录，在Git中，我们用git log命令查看  :  $ git log --pretty=oneline

cat git总结.txt:打开文本

命令git reflog用来记录你的每一次命令  $ git reset --hard HEAD^：回到某个版本 git reset --hard commit_id
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git merge命令用于合并指定分支到当前分支。
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

下拉远程仓库代码：git clone https://github.com/lywlong/demo.git

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore

忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

配置别名

如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
告诉Git，以后st就表示status：
$ git config --global alias.st status

有一个仓库，叫Repo A。你如果要往里面贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2,。然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。如果被审核通过并正式合并，这样你就为项目A做贡献了
